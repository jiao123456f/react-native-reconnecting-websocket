import React, { useState, useEffect } from 'react';
import { View, Text, TextInput, Button, StyleSheet } from 'react-native';


const WebSocketDemo = () => {
  const [webSocket, setWebSocket] = useState(null);
  const [message, setMessage] = useState('');
  const [receivedMessage, setReceivedMessage] = useState('');
  const [isConnected, setIsConnected] = useState(false);

  useEffect(() => {
    // Cleanup function
    return () => {
      if (webSocket) {
        webSocket.close();
        setWebSocket(null);
        setIsConnected(false);
      }
    };
  }, [webSocket]);

  const connectWebSocket = () => {
    const ws = new WebSocket('ws://124.222.224.186:8800');
    ws.onopen = () => {
      console.log('======WebSocket connection opened======');
      setWebSocket(ws);
      setIsConnected(true);
    };
    ws.onmessage = (event) => {
      console.log('==========Received message========:', event.data);
      setReceivedMessage(event.data);
    };
    ws.onerror = (error) => {
      console.error('============WebSocket connection error==========:', error);
      setIsConnected(false);
    };
    ws.onclose = () => {
      console.log('==========WebSocket connection closed==============');
      setWebSocket(null);
      setIsConnected(false);
    };
  };

  const disconnectWebSocket = () => {
    if (webSocket) {
      webSocket.close();
      setWebSocket(null);
      setIsConnected(false);
    }
  };

  const sendMessage = () => {
    if (webSocket && message.trim() !== '') {
      webSocket.send(message.trim());
      console.log('Sent message:', message.trim());
      setMessage('');
    }
  };

  return (
    <View style={styles.container}>
      <TextInput
        style={styles.input}
        value={message}
        onChangeText={setMessage}
        placeholder="Enter message"
      />
      <Button
        onPress={sendMessage}
        title="Send"
      />
      <Text style={styles.receivedMessage}>Received message: {receivedMessage}</Text>
      <View style={styles.bottomButtons}>
        <Button
          onPress={isConnected ? disconnectWebSocket : connectWebSocket}
          title={isConnected ? 'Disconnect' : 'Connect'}
        />
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  input: {
    height: 40,
    borderColor: 'gray',
    borderWidth: 1,
    marginVertical: 10,
    paddingHorizontal: 10,
    width: '80%',
  },
  receivedMessage: {
    marginTop: 20,
    fontSize: 16,
  },
  bottomButtons: {
    position: 'absolute',
    bottom: 20,
  },
});

export default WebSocketDemo;